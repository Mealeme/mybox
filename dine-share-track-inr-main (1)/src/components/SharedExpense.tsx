import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Expense } from '@/data/types';
import { useToast } from '@/components/ui/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { usePdfExport } from '@/hooks/usePdfExport';
import { useLocalStorage } from '@/hooks/useLocalStorage';
import { Download, Share2, Copy, FileText, Settings2, Loader2, CheckSquare, ChevronDown, Send, Smartphone, CheckCircle2 } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Badge } from '@/components/ui/badge';

interface SharedExpenseProps {
  expenses: Expense[];
}

const SharedExpense: React.FC<SharedExpenseProps> = ({ expenses }) => {
  const [selectedExpenses, setSelectedExpenses] = useState<Expense[]>(expenses);
  const [userProfile] = useLocalStorage('userProfile', { name: 'User', email: '', phone: '' });
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();
  const { exportToPdf, isExporting } = usePdfExport();
  const prevExpensesRef = useRef<string[]>([]);
  
  useEffect(() => {
    // Use JSON stringify for deep comparison to detect changes
    const currentExpensesJson = JSON.stringify(expenses);
    const prevExpensesJson = JSON.stringify(prevExpensesRef.current);
    
    if (currentExpensesJson !== prevExpensesJson) {
      // Show a brief loading state for better UX
      setIsProcessing(true);
      
      // Update with a short delay to show animation
      setTimeout(() => {
        setSelectedExpenses(expenses);
        setIsProcessing(false);
      }, 300);
      
      // Update reference
      prevExpensesRef.current = expenses.map(e => e.id);
    }
  }, [expenses]);
  
  const handleShare = (method: 'whatsapp' | 'email' | 'copy') => {
    if (selectedExpenses.length === 0) {
      toast({
        title: "No expenses selected",
        description: "Please select at least one expense to share",
        variant: "destructive",
      });
      return;
    }
    
    const total = selectedExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    
    let message = `My Expense Summary (₹${total.toLocaleString('en-IN')})\n\n`;
    message += `Generated by: ${userProfile.name || 'User'}\n\n`;
    
    selectedExpenses.forEach(expense => {
      const date = new Date(expense.date).toLocaleDateString('en-IN');
      message += `${date} - ${expense.category}: ₹${expense.amount} ${expense.description ? `(${expense.description})` : ''}\n`;
    });
    
    switch (method) {
      case 'whatsapp':
        const encodedMessage = encodeURIComponent(message);
        window.open(`https://wa.me/?text=${encodedMessage}`, '_blank');
        toast({
          title: "WhatsApp Share",
          description: "Opening WhatsApp to share your expense summary",
        });
        break;
      case 'email':
        const subject = encodeURIComponent('My Expense Summary');
        const body = encodeURIComponent(message);
        window.open(`mailto:?subject=${subject}&body=${body}`, '_blank');
        toast({
          title: "Email Share",
          description: "Opening your email client to share expenses",
        });
        break;
      case 'copy':
        navigator.clipboard.writeText(message);
        toast({
          title: "Copied to clipboard",
          description: "You can now paste the expense summary",
        });
        break;
    }
  };
  
  const generatePDF = () => {
    if (selectedExpenses.length === 0) {
      toast({
        title: "No expenses selected",
        description: "Please select at least one expense to download",
        variant: "destructive",
      });
      return;
    }
    
    // Get the most up-to-date user profile at export time
    const userProfileData = localStorage.getItem('userProfile');
    const currentProfile = userProfileData 
      ? JSON.parse(userProfileData) 
      : { name: 'User', email: '', phone: '' };
    
    // Debug message
    console.log('[PDF Export] Generating PDF with current profile:', currentProfile);
    
    // Pass the selected expenses directly to ensure we're using exactly what the user selected
    exportToPdf('MealSync Expense Report', {
      userName: currentProfile.name || 'User',
      forceRefreshProfile: true, // Tell the PDF generator to force a refresh of profile data
      selectedExpenses: selectedExpenses // Pass the selected expenses directly
    });
  };
  
  // Animation variants
  const cardVariants = {
    hidden: { opacity: 0.8, y: 10 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4 } },
  };
  
  return (
    <motion.div
      initial="hidden"
      animate="visible"
      variants={cardVariants}
    >
      <Card className="border-none overflow-hidden shadow-xl hover:shadow-2xl transition-all duration-500">
        <CardHeader className="bg-gradient-to-r from-blue-500/20 to-indigo-600/20 backdrop-blur-sm pb-2 pt-6">
          <CardTitle className="text-lg font-medium flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="p-2 rounded-full bg-blue-500 text-white shadow-md">
                <Share2 className="h-4 w-4" />
              </div>
              <span>Share & Download</span>
              {isProcessing && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.8 }}
                  className="ml-2"
                >
                  <Loader2 className="h-4 w-4 animate-spin text-blue-500" />
                </motion.div>
              )}
            </div>
            <Badge variant="outline" className="bg-background/80 backdrop-blur-sm">
              {expenses.length} items
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4 p-5 bg-gradient-to-r from-blue-50/30 to-indigo-50/30 dark:from-blue-950/10 dark:to-indigo-950/10">
          <AnimatePresence>
            <motion.div 
              className="grid grid-cols-2 gap-3"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1, transition: { staggerChildren: 0.1 } }}
            >
              {[
                {
                  icon: <Smartphone className="h-5 w-5" />,
                  label: "WhatsApp",
                  description: "Share via WhatsApp",
                  color: "from-green-500 to-emerald-600",
                  onClick: () => handleShare('whatsapp'),
                },
                {
                  icon: <Send className="h-5 w-5" />,
                  label: "Email",
                  description: "Share via Email",
                  color: "from-blue-500 to-indigo-600",
                  onClick: () => handleShare('email'),
                },
                {
                  icon: <Copy className="h-5 w-5" />,
                  label: "Copy Text",
                  description: "Copy to clipboard",
                  color: "from-violet-500 to-purple-600",
                  onClick: () => handleShare('copy'),
                },
                {
                  icon: isExporting ? <Loader2 className="h-5 w-5 animate-spin" /> : <FileText className="h-5 w-5" />,
                  label: isExporting ? "Generating..." : "PDF Export",
                  description: "Download as PDF",
                  color: "from-red-500 to-rose-600",
                  onClick: generatePDF,
                  disabled: isExporting,
                },
              ].map((item, i) => (
                <motion.div
                  key={i}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: i * 0.1 }}
                >
                  <Button 
                    variant="outline"
                    className="w-full flex flex-col items-center p-4 h-auto gap-3 transition-all duration-300 hover:scale-102 border-none shadow-md hover:shadow-lg bg-white/40 dark:bg-white/5 backdrop-blur-sm"
                    onClick={item.onClick}
                    disabled={item.disabled}
                  >
                    <motion.div 
                      className={`w-12 h-12 rounded-full bg-gradient-to-r ${item.color} flex items-center justify-center text-white shadow-md`}
                      whileHover={{ rotate: 8, scale: 1.05 }}
                      transition={{ type: "spring", stiffness: 300, damping: 10 }}
                    >
                      {item.icon}
                    </motion.div>
                    <div className="flex flex-col items-center">
                      <span className="font-medium">{item.label}</span>
                      <span className="text-xs text-muted-foreground">{item.description}</span>
                    </div>
                  </Button>
                </motion.div>
              ))}
            </motion.div>
          </AnimatePresence>
        
          <div className="mt-3 pt-3 border-t border-border/30">
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="ghost" size="sm" className="w-full flex items-center justify-center gap-2 hover:bg-blue-500/10 transition-colors rounded-md bg-background/50 backdrop-blur-sm shadow-sm">
                  <Settings2 className="h-4 w-4" />
                  <span>Advanced Options</span>
                  <ChevronDown className="h-3 w-3 ml-1 opacity-70" />
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md backdrop-blur-sm border border-border/50 shadow-lg">
                <DialogHeader>
                  <DialogTitle>Export Options</DialogTitle>
                  <DialogDescription>
                    Customize your export settings for better results
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4 py-4">
                  <div className="space-y-2">
                    <Label>Date Range</Label>
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <Label htmlFor="start-date" className="text-xs">Start Date</Label>
                        <Input 
                          id="start-date"
                          type="date"
                          className="transition-all duration-200 border-border/40 focus:border-blue-500"
                        />
                      </div>
                      <div>
                        <Label htmlFor="end-date" className="text-xs">End Date</Label>
                        <Input 
                          id="end-date"
                          type="date"
                          className="transition-all duration-200 border-border/40 focus:border-blue-500"
                        />
                      </div>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label>Export Format</Label>
                    <div className="grid grid-cols-2 gap-2">
                      <Button 
                        variant="outline"
                        onClick={generatePDF}
                        className="w-full flex items-center gap-2 transition-all duration-200 hover:bg-gradient-to-r hover:from-blue-500 hover:to-indigo-600 hover:text-white"
                        disabled={isExporting}
                      >
                        <FileText className="h-4 w-4" />
                        {isExporting ? "Generating..." : "PDF"}
                      </Button>
                      <Button 
                        variant="outline"
                        onClick={() => {
                          // For CSV implementation
                          toast({
                            title: "CSV Export",
                            description: "This feature will be available in future updates",
                          });
                        }}
                        className="w-full flex items-center gap-2 transition-all duration-200 hover:bg-gradient-to-r hover:from-green-500 hover:to-emerald-600 hover:text-white"
                      >
                        <Download className="h-4 w-4" />
                        CSV
                      </Button>
                    </div>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
          
          {selectedExpenses.length > 0 && (
            <div className="rounded-md bg-green-500/10 p-3 flex items-center gap-2 text-sm">
              <CheckCircle2 className="h-4 w-4 text-green-500" />
              <span>
                <span className="font-medium">Ready to share:</span> {selectedExpenses.length} expenses (₹{selectedExpenses.reduce((sum, exp) => sum + exp.amount, 0).toLocaleString('en-IN')})
              </span>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default SharedExpense;
